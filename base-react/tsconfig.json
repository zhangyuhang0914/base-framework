{
  "compilerOptions": {
    "target": "ESNext", // 编译后代码的目标版本（ECMAScript）
    "allowJs": true, // 允许编译JavaScript文件
    "useDefineForClassFields": true,
    "module": "ESNext", // 使用的模块系统类型。ESNext 支持更多特性，比如动态导入等
    "lib": ["ESNext", "DOM", "DOM.Iterable"], // 要包含的库文件。DOM、DOM.Iterable 和 ESNext 库文件是 TypeScript 开发中比较基础的依赖
    "skipLibCheck": true, // 跳过编译器对引入库文件的检查，以加快构建速度

    /* Bundler mode */
    "moduleResolution": "Node",
    "allowImportingTsExtensions": true, // 允许在 import 导入语句中导入 .ts 或 .tsx 扩展名的模块，而不需要显式地指定扩展名
    "allowSyntheticDefaultImports": true, // 允许在默认导入时使用 export = 声明的模块
    "resolveJsonModule": true, // 允许导入json模块
    "isolatedModules": true, // 让typescript处理每个文件时都是独立的单元（可加快编译速度）
    "noEmit": true, // 编译器不生成任何JS文件
    "jsx": "preserve",
    "sourceMap": true, // 输出 *.map 文件提供源码映射
    "declaration": true, // 是否生成声明文件（.d.ts）
    "removeComments": true, // 是否移除注释。可以提高编译速度并减小生成文件的大小
    // 使 TypeScript 可以更好地与 CommonJS 模块兼容。在使用 CommonJS 模块系统时，导出的模块将会被包装在一个对象中，这是因为 CommonJS 使用的是类似于 module.exports 的语法来导出模块。
    // 而某些工具和库可能需要以 ES6 模块的方式导入这些 CommonJS 模块，这时候就可以开启 esModuleInterop 选项。
    // 开启后，在导入 CommonJS 模块时不需要再使用默认导出才能正确引入，也不需要手动处理 require() 和 module.exports。
    // 这使得导入和使用 CommonJS 模块的过程变得更加简洁方便。
    "esModuleInterop": true,

    /* Linting */
    "strict": true, // 启用所有严格类型检查选项
    "noUnusedLocals": false, // 是否检查未使用的局部变量
    "noUnusedParameters": false, // 是否检查未使用的参数
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".", // 工作根目录
    "paths": {
      "@/*": ["src/*"],
      "#/*": ["src/types/*"]
    },
    "types": ["node"]
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"],
  "exclude": ["node_modules", "dist"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
